Index: libzyutil-1.0/BROADCOM/libzyutil_wrapper.c
===================================================================
--- libzyutil-1.0.orig/BROADCOM/libzyutil_wrapper.c	2021-04-20 10:00:15.265071531 +0800
+++ libzyutil-1.0/BROADCOM/libzyutil_wrapper.c	2021-04-20 10:02:31.971955590 +0800
@@ -2,7 +2,7 @@
 
 #include "libzyutil_wrapper.h"
 #include "libzyutil_brcm_wrapper.h"
-
+#include "zos_api.h"
 /*from common.c*/
 #include "board.h"
 #include "bcm_hwdefs.h"
@@ -228,7 +228,7 @@
 	if(nvramDataGet(&nvramData) < 0)
 		return ZCFG_INTERNAL_ERROR;
 
-        sprintf(mac ,"%02X%02X%02X%02X%02X%02X",
+        zos_snprintf(mac , MAC_ADDRESS_LEN, "%02X%02X%02X%02X%02X%02X",
 			nvramData.ucaBaseMacAddr[0],
 			nvramData.ucaBaseMacAddr[1],
         	nvramData.ucaBaseMacAddr[2],
@@ -248,7 +248,7 @@
 	if(nvramDataGet(&nvramData) < 0)
 		return ZCFG_INTERNAL_ERROR;
 
-        sprintf(mac ,"%02X:%02X:%02X:%02X:%02X:%02X",
+        zos_snprintf(mac , MAC_ADDRESS_WITH_COLON, "%02X:%02X:%02X:%02X:%02X:%02X",
 			nvramData.ucaBaseMacAddr[0],
 			nvramData.ucaBaseMacAddr[1],
         	nvramData.ucaBaseMacAddr[2],
@@ -307,10 +307,10 @@
 		int ret = 0, gpioNum = 11;
 		ret = zyUtilGetGPIO(gpioNum);
 		if(ret){//VMG3926
-			strcpy(pdname, "VMG3926-B10A");
+			ZOS_STRNCPY(pdname, "VMG3926-B10A", NVRAM_PRODUCTNAME_LEN);
 		}
 		else{//VMG8924
-			strcpy(pdname, "VMG8924-B10B");
+			ZOS_STRNCPY(pdname, "VMG8924-B10B", NVRAM_PRODUCTNAME_LEN);
 		}
 	}
 	else{
@@ -320,7 +320,8 @@
 		if(nvramDataGet(&nvramData) < 0)
 			return ZCFG_INTERNAL_ERROR;
 
-		strcpy(pdname, nvramData.ProductName);
+		/*Length of NVRAM_DATA->ProductName is NVRAM_PRODUCTNAME_LEN, 32, Yen-Chun,Lin, 20210324*/
+		ZOS_STRNCPY(pdname, nvramData.ProductName, NVRAM_PRODUCTNAME_LEN);
 	}
 #else
 	NVRAM_DATA nvramData;
@@ -329,7 +330,8 @@
 	if(nvramDataGet(&nvramData) < 0)
 		return ZCFG_INTERNAL_ERROR;
 
-	strcpy(pdname, nvramData.ProductName);
+	/*Length of NVRAM_DATA->ProductName is NVRAM_PRODUCTNAME_LEN, 32, Yen-Chun,Lin, 20210324*/
+	ZOS_STRNCPY(pdname, nvramData.ProductName, NVRAM_PRODUCTNAME_LEN);
 #if defined(ZYPRJ_VMG3926) && defined(SAME_FW_FOR_TWO_BOARD) && defined(BCM_SDK_416L05)
 {
     FILE *fp = NULL;
@@ -352,13 +354,15 @@
 
     if (!strncmp(str, RUNTIME_BOARDID_VMG3925_B10B, strlen(RUNTIME_BOARDID_VMG3925_B10B)))
     {
-        memset(pdname, 0, NVRAM_PRODUCTNAME_LEN);
-        strcpy(pdname, "VMG3925-B10B");
+        *Length of NVRAM_DATA->ProductName is NVRAM_PRODUCTNAME_LEN, 32, Yen-Chun,Lin, 20210324*/
+		memset(pdname, 0, NVRAM_PRODUCTNAME_LEN);
+        ZOS_STRNCPY(pdname, "VMG3925-B10B",  NVRAM_PRODUCTNAME_LEN);
     }
     else if (!strncmp(str, RUNTIME_BOARDID_VMG3925_B10C, strlen(RUNTIME_BOARDID_VMG3925_B10C)))
     {
-        memset(pdname, 0, NVRAM_PRODUCTNAME_LEN);
-        strcpy(pdname, "VMG3925-B10C");
+        /*Length of NVRAM_DATA->ProductName is NVRAM_PRODUCTNAME_LEN, 32, Yen-Chun,Lin, 20210324*/
+		memset(pdname, 0, NVRAM_PRODUCTNAME_LEN);
+        ZOS_STRNCPY(pdname, "VMG3925-B10C", NVRAM_PRODUCTNAME_LEN);
     }
 
     fclose(fp);
@@ -376,17 +380,17 @@
 	char fwId[60] = {0};
 	char produnctName[32] = {0};
 	zyUtilIGetProductName(produnctName);
-	sprintf(fwId, "%s_Elisa6_", produnctName);
+	zos_snprintf(fwId, sizeof(fwId), "%s_Elisa6_", produnctName);
 #endif
 	memset(&zyFwInfoData, 0, sizeof(ZY_FW_INFO));
 
 	if(zyFwInfoGet(&zyFwInfoData) < 0)
 		return ZCFG_INTERNAL_ERROR;
 #ifdef ELISA_CUSTOMIZATION
-	strcat(fwId, zyFwInfoData.FirmwareVersion);
-	strcpy(fwversion, fwId);
+	ZOS_STRCAT(fwId, zyFwInfoData.FirmwareVersion, sizeof(fwId));
+	ZOS_STRNCPY(fwversion, fwId, 64);
 #else
-	strcpy(fwversion, zyFwInfoData.FirmwareVersion);
+	ZOS_STRNCPY(fwversion, zyFwInfoData.FirmwareVersion, NVRAM_FIRMWAREVERSION_LEN);
 #endif
 
 #ifdef ZYXEL_RMA_FW_SUPPORT
@@ -409,7 +413,7 @@
 	if(nvramDataGet(&nvramData) < 0)
 		return ZCFG_INTERNAL_ERROR;
 
-	strcpy(serianumber, nvramData.SerialNumber);
+	ZOS_STRNCPY(serianumber, nvramData.SerialNumber, NVRAM_SERIALNUMBER_LEN);
 	return ZCFG_SUCCESS;
 }
 
@@ -430,9 +434,9 @@
 		return ZCFG_INTERNAL_ERROR;
 
 	if(serianumber != NULL)
-		strcpy(serianumber, nvramData.gponSerialNumber);
+		ZOS_STRNCPY(serianumber, nvramData.gponSerialNumber, NVRAM_GPON_SERIAL_NUMBER_LEN);
 	if(password != NULL)
-		strcpy(password, nvramData.gponPassword);
+		ZOS_STRNCPY(password, nvramData.gponPassword, NVRAM_GPON_PASSWORD_LEN);
 	
 	return ZCFG_SUCCESS;
 }
@@ -583,7 +587,7 @@
 		return 0;
 	}
 
-	sprintf(cmd, "hexdump -n 2 /var/fw/%s", uploadfilename);
+	zos_snprintf(cmd, sizeof(cmd), "hexdump -n 2 /var/fw/%s", uploadfilename);
 	fp = popen(cmd, "r");
 	if (fp == NULL)
 	{
Index: libzyutil-1.0/ECONET/libzyutil_wrapper.c
===================================================================
--- libzyutil-1.0.orig/ECONET/libzyutil_wrapper.c	2021-04-20 10:00:15.281071530 +0800
+++ libzyutil-1.0/ECONET/libzyutil_wrapper.c	2021-04-20 10:03:23.008989873 +0800
@@ -9,6 +9,7 @@
 #include "libzyutil_wrapper.h"
 #include "libzyutil_econet_wrapper.h"
 #include "zcfg_msg.h"
+#include "zos_api.h"
 
 static zcfgRet_t zyUtilReqSendWithResponse(uint32_t msgType, zcfgEid_t srcEid, zcfgEid_t dstEid, int payloadLen, const char *payload, char **returnStr)
     {
@@ -174,16 +175,16 @@
 	int uid = getuid();
 	cuserid(username); 
 
-	strcpy(filename, MRDINFO_FILE_X);
+	ZOS_STRNCPY(filename, MRDINFO_FILE_X, sizeof(filename));
 	if (mkstemp(filename) < 0 ){
 		printf("%s: Can't create MRD file!\n",__FUNCTION__);
 		return ZCFG_INTERNAL_ERROR;
 	} 
 
-	sprintf(sysCmd,FLASH_READ_CMD,filename,(long unsigned int)MRDINFO_SIZE,(long unsigned int)MRDINFO_OFFSET,MRDINFO_PARTITON_NAME);
+	zos_snprintf(sysCmd,sizeof(sysCmd),FLASH_READ_CMD,filename,(long unsigned int)MRDINFO_SIZE,(long unsigned int)MRDINFO_OFFSET,MRDINFO_PARTITON_NAME);
 
     if(uid == 0){
-	    system(sysCmd);
+	    ZOS_SYSTEM(sysCmd);
     }else{
         zyUtilReqSendWithResponse(ZCFG_MSG_FAKEROOT_COMMAND_REPLY, ZCFG_EID_SYS_CMD, ZCFG_EID_ESMD, strlen(sysCmd), sysCmd, (char**)&sysCmd_reply);
 
@@ -191,7 +192,7 @@
         if(!sysCmd_reply || (sysCmd_reply && strcmp(sysCmd_reply, "1") != 0)){
             printf("%s: Update Fail!!! \n", __FUNCTION__);        
         }
-	    sprintf(sysCmd,"chmod 666 %s | chown %s %s",filename, username, filename);
+	    zos_snprintf(sysCmd,sizeof(sysCmd),"chmod 666 %s | chown %s %s",filename, username, filename);
         zyUtilReqSendWithResponse(ZCFG_MSG_FAKEROOT_COMMAND_REPLY, ZCFG_EID_SYS_CMD, ZCFG_EID_ESMD, strlen(sysCmd), sysCmd, (char**)&sysCmd_reply);
 
         //if((sysCmd_reply == NULL) && strcmp(sysCmd_reply, "1") != 0){
@@ -212,8 +213,8 @@
     {
 		// Get MRD info from bootloader partition with offset 0xff00
     	printf("%s: %s does not exist, so create new one.\n", __func__, MRDINFO_FILE);
-		sprintf(sysCmd,FLASH_READ_CMD,MRDINFO_FILE,(long unsigned int)MRDINFO_SIZE,(long unsigned int)MRDINFO_OFFSET,MRDINFO_PARTITON_NAME);
-		system(sysCmd);
+		zos_snprintf(sysCmd,sizeof(sysCmd),FLASH_READ_CMD,MRDINFO_FILE,(long unsigned int)MRDINFO_SIZE,(long unsigned int)MRDINFO_OFFSET,MRDINFO_PARTITON_NAME);
+		ZOS_SYSTEM(sysCmd);
 		chmod(MRDINFO_FILE, 438); // 438(decimal) = 666(octal)
 	}
 	/*Read MRD info to buffer*/
@@ -224,7 +225,8 @@
 	int prnameLen = MRD_PRODUCT_NAME_LEN;
 	if(zyUtilAskProductName(prname, prnameLen) > 0){
 		if(strcmp(mrd->PRODUCT_NAME, prname)){
-			strcpy(mrd->PRODUCT_NAME, prname);
+			/*Length of mrd->PRODUCT_NAME is MRD_PRODUCT_NAME_LEN, 32, Yen-Chun,Lin, 20210324*/
+			ZOS_STRNCPY(mrd->PRODUCT_NAME, prname,MRD_PRODUCT_NAME_LEN);
 			zyUtilSetMrdInfo(mrd);
 		}
 	}
@@ -252,8 +254,8 @@
 	dumpMRDinfo(mrd);
 
 	// Set MRD info from file into bootloader partition with offset 0xff00
-	sprintf(sysCmd,FLASH_WRITE_CMD,MRDINFO_FILE,(long unsigned int)MRDINFO_SIZE,(long unsigned int)MRDINFO_OFFSET,MRDINFO_PARTITON_NAME);
-	//system(sysCmd);
+	zos_snprintf(sysCmd,sizeof(sysCmd),FLASH_WRITE_CMD,MRDINFO_FILE,(long unsigned int)MRDINFO_SIZE,(long unsigned int)MRDINFO_OFFSET,MRDINFO_PARTITON_NAME);
+	//ZOS_SYSTEM(sysCmd);
 	//printf("%s:sysCmd = %s\n", __FUNCTION__, sysCmd);
 
 	zyUtilReqSendWithResponse(ZCFG_MSG_FAKEROOT_COMMAND_REPLY, ZCFG_EID_SYS_CMD, ZCFG_EID_ESMD, strlen(sysCmd), sysCmd, (char**)&sysCmd_reply);
@@ -282,7 +284,7 @@
 	if(0 != zyUtilGetMrdInfo(&mrd_buff))
 		return -1;
 
-	sprintf(mac ,"%02X%02X%02X%02X%02X%02X",
+	zos_snprintf(mac , MAC_ADDRESS_LEN, "%02X%02X%02X%02X%02X%02X",
 		mrd_buff.ETHER_ADDR[0],
 		mrd_buff.ETHER_ADDR[1],
         	mrd_buff.ETHER_ADDR[2],
@@ -303,7 +305,7 @@
 	if(0 != zyUtilGetMrdInfo(&mrd_buff))
 		return -1;
 
-	sprintf(mac ,"%02X:%02X:%02X:%02X:%02X:%02X",
+	zos_snprintf(mac , MAC_ADDRESS_WITH_COLON, "%02X:%02X:%02X:%02X:%02X:%02X",
 		mrd_buff.ETHER_ADDR[0],
 		mrd_buff.ETHER_ADDR[1],
         	mrd_buff.ETHER_ADDR[2],
@@ -417,7 +419,8 @@
 	if(0 != zyUtilGetMrdInfo(&mrd_buff))
 		return -1;
 
-	strcpy(pdname, mrd_buff.PRODUCT_NAME);
+	/*Length of mrd->PRODUCT_NAME is MRD_PRODUCT_NAME_LEN, 32, Yen-Chun,Lin, 20210324*/
+	ZOS_STRNCPY(pdname, mrd_buff.PRODUCT_NAME, MRD_PRODUCT_NAME_LEN);
 
 	//printf("ProductName:%s\n",pdname);
 
@@ -431,7 +434,8 @@
 	if(0 != zyUtilGetBootImageHeader((void *)&trx_header_buff))
 		return -1;
 
-	strcpy(fwversion, trx_header_buff.swVersionInt);
+	/*Length of trx_header->swVersionInt is SW_VERSION_LEN, 32, Yen-Chun,Lin, 20210324*/
+	ZOS_STRNCPY(fwversion, trx_header_buff.swVersionInt, SW_VERSION_LEN);
 
 	//printf("FirmwareVersion:%s\n",fwversion);
 
@@ -453,7 +457,8 @@
 	if(0 != zyUtilGetMrdInfo(&mrd_buff))
 		return -1;
 
-	strcpy(serianumber, mrd_buff.SerialNumber);
+	/*Length of mrd->SerialNumber is MRD_SERIAL_NUM_LEN, 14, Yen-Chun,Lin, 20210324*/
+	ZOS_STRNCPY(serianumber, mrd_buff.SerialNumber, MRD_SERIAL_NUM_LEN);
 
 	//printf("SerialNumber:%s\n",serianumber);
 
@@ -480,11 +485,11 @@
 	FILE *fptr = NULL;
 	char bootflag[2] = {0};
 
-	sprintf(sysCmd,FLASH_READ_CMD,BOOT_FLAG_FILE,(long unsigned int)BOOT_FLAG_SIZE,(long unsigned int)BOOT_FLAG_OFFSET,RESERVEAREA_NAME);
-	system(sysCmd);
+	zos_snprintf(sysCmd,sizeof(sysCmd),FLASH_READ_CMD,BOOT_FLAG_FILE,(long unsigned int)BOOT_FLAG_SIZE,(long unsigned int)BOOT_FLAG_OFFSET,RESERVEAREA_NAME);
+	ZOS_SYSTEM(sysCmd);
 #if 0 // because chmod command-line has been locked only for root use
-	sprintf(sysCmd,"chmod 666 %s",BOOT_FLAG_FILE);
-	system(sysCmd);
+	zos_snprintf(sysCmd,sizeof(sysCmd),"chmod 666 %s",BOOT_FLAG_FILE);
+	ZOS_SYSTEM(sysCmd);
 #else
 	chmod(BOOT_FLAG_FILE, 438); // 438(decimal) = 666(octal)
 #endif
@@ -523,13 +528,12 @@
     void *sysCmd_reply=NULL;    
     
 	if(boot_flag !=0 && boot_flag != 1) return ZCFG_INTERNAL_ERROR;
-	sprintf(sysCmd, "echo %d > %s", boot_flag, BOOT_FLAG_FILE);
-	system(sysCmd);
+	zos_snprintf(sysCmd, sizeof(sysCmd), "echo %d > %s", boot_flag, BOOT_FLAG_FILE);
+	ZOS_SYSTEM(sysCmd);
 	//printf("%s:sysCmd = %s\n", __FUNCTION__, sysCmd);
 
-	sprintf(sysCmd,FLASH_WRITE_CMD,BOOT_FLAG_FILE,(long unsigned int)BOOT_FLAG_SIZE,(long unsigned int)BOOT_FLAG_OFFSET,RESERVEAREA_NAME);
-	//system(sysCmd);
-	//printf("%s:sysCmd = %s\n", __FUNCTION__, sysCmd);
+	zos_snprintf(sysCmd,sizeof(sysCmd),FLASH_WRITE_CMD,BOOT_FLAG_FILE,(long unsigned int)BOOT_FLAG_SIZE,(long unsigned int)BOOT_FLAG_OFFSET,RESERVEAREA_NAME);
+	//ZOS_SYSTEM(sysCmd);
 
 	zyUtilReqSendWithResponse(ZCFG_MSG_FAKEROOT_COMMAND_REPLY, ZCFG_EID_SYS_CMD, ZCFG_EID_ESMD_GROUND, strlen(sysCmd), sysCmd, (char**)&sysCmd_reply);
 
@@ -551,12 +555,12 @@
 	int currentBootFlag;
 
 	zyUtilIGetBootingFlag(&currentBootFlag);
-	sprintf(sysCmd,FLASH_READ_CMD,BOOTIMG_HEADER_FILE,(long unsigned int)BOOTIMG_HEADER_SIZE,(long unsigned int)BOOTIMG_HEADER_OFFSET, \
+	zos_snprintf(sysCmd,sizeof(sysCmd),FLASH_READ_CMD,BOOTIMG_HEADER_FILE,(long unsigned int)BOOTIMG_HEADER_SIZE,(long unsigned int)BOOTIMG_HEADER_OFFSET, \
 			(currentBootFlag==1)?SLAVE_ROOTFS_PARTITION_NAME:MAIN_ROOTFS_PARTITION_NAME);
-	system(sysCmd);
+	ZOS_SYSTEM(sysCmd);
 #if 0 // because chmod command-line has been locked only for root use
-	sprintf(sysCmd,"chmod 666 %s",BOOTIMG_HEADER_FILE);
-	system(sysCmd);
+	zos_snprintf(sysCmd,sizeof(sysCmd),"chmod 666 %s",BOOTIMG_HEADER_FILE);
+	ZOS_SYSTEM(sysCmd);
 #else
 	chmod(BOOTIMG_HEADER_FILE, 438); // 438(decimal) = 666(octal)
 #endif
@@ -585,9 +589,9 @@
 	int currentBootFlag;
 
 	zyUtilIGetBootingFlag(&currentBootFlag);
-	sprintf(sysCmd,FLASH_READ_CMD,BOOTIMG_HEADER_FILE,(long unsigned int)BOOTIMG_HEADER_SIZE,(long unsigned int)BOOTIMG_HEADER_OFFSET, \
+	zos_snprintf(sysCmd,sizeof(sysCmd),FLASH_READ_CMD,BOOTIMG_HEADER_FILE,(long unsigned int)BOOTIMG_HEADER_SIZE,(long unsigned int)BOOTIMG_HEADER_OFFSET, \
 			(bootFlag==1)?SLAVE_ROOTFS_PARTITION_NAME:MAIN_ROOTFS_PARTITION_NAME);
-	system(sysCmd);
+	ZOS_SYSTEM(sysCmd);
 	//printf("%s:sysCmd = %s\n", __FUNCTION__, sysCmd);
 
     /*Read boot flag to buffer*/
@@ -603,7 +607,8 @@
 	fclose(fptr);
 	unlink(BOOTIMG_HEADER_FILE);
 
-	strcpy(fwversion, local_booting_header.swVersionInt);
+	/*Length of trx_header->swVersionInt is SW_VERSION_LEN, 32, Yen-Chun,Lin, 20210324*/
+	ZOS_STRNCPY(fwversion, local_booting_header.swVersionInt, SW_VERSION_LEN);
 	
 	return ZCFG_SUCCESS;
 }
@@ -813,7 +818,7 @@
 		return 0;
 	}
 
-	sprintf(cmd, "hexdump -n 4 /var/fw/%s", uploadfilename);
+	zos_snprintf(cmd, sizeof(cmd), "hexdump -n 4 /var/fw/%s", uploadfilename);
 	fp = popen(cmd, "r");
 	if (fp == NULL)
 	{
Index: libzyutil-1.0/QUALCOMM/libzyutil_wrapper.c
===================================================================
--- libzyutil-1.0.orig/QUALCOMM/libzyutil_wrapper.c	2021-04-20 10:00:15.265071531 +0800
+++ libzyutil-1.0/QUALCOMM/libzyutil_wrapper.c	2021-04-20 10:04:10.869840217 +0800
@@ -6,6 +6,7 @@
 #include "zcfg_debug.h"
 #include "libzyutil_wrapper.h"
 #include "libzyutil_qualcomm_wrapper.h"
+#include "zos_api.h"
 
 #ifdef SUPPORT_LANVLAN
 zcfgRet_t zyUtilISetIfState(char *ifName, bool up)
@@ -22,7 +23,7 @@
 {
   zcfgLog(ZCFG_LOG_DEBUG, ">> %s\n", __FUNCTION__);
 	// TODO Read real data from k-data.
-  sprintf(mac ,"%02X%02X%02X%02X%02X%02X", 0, 1, 2, 3, 4, 5);
+  zos_snprintf(mac , MAC_ADDRESS_LEN, "%02X%02X%02X%02X%02X%02X", 0, 1, 2, 3, 4, 5);
   zcfgLog(ZCFG_LOG_DEBUG, "<< %s\n", __FUNCTION__);
   return ZCFG_SUCCESS;
 }
@@ -152,7 +153,7 @@
 		return 0;
 	}
 
-	sprintf(cmd, "hexdump -n 2 /var/fw/%s", uploadfilename);
+	zos_snprintf(cmd, sizeof(cmd), "hexdump -n 2 /var/fw/%s", uploadfilename);
 	fp = popen(cmd, "r");
 	if (fp == NULL)
 	{
Index: libzyutil-1.0/common.c
===================================================================
--- libzyutil-1.0.orig/common.c	2021-04-20 10:00:15.321071530 +0800
+++ libzyutil-1.0/common.c	2021-04-20 10:00:15.337071530 +0800
@@ -59,9 +59,9 @@
 	char *p = NULL;
 	FILE *fp = NULL;
 
-	strcpy(hwaddr, "");
+	memset(hwaddr, 0, strlen(hwaddr)); //clear the string before "/0"
 
-	sprintf(sysCmd, "ifconfig %s > /var/hwaddr ", ifname);
+	zos_snprintf(sysCmd, sizeof(sysCmd),"ifconfig %s > /var/hwaddr ", ifname);
 	system(sysCmd);
 
 	fp = fopen("/var/hwaddr", "r");
@@ -97,7 +97,7 @@
 	if(strlen(appName) == 0)
 		return false;
 
-	sprintf(sysCmd, "ps | grep %s | grep -v grep > /tmp/app", appName);
+	zos_snprintf(sysCmd, sizeof(sysCmd),"ps | grep %s | grep -v grep > /tmp/app", appName);
 	system(sysCmd);
 
 	fp = fopen("/tmp/app", "r");
@@ -124,7 +124,7 @@
 		return ret;
 	}
 
-	strcpy(intf.ifr_name, devname);
+	ZOS_STRNCPY(intf.ifr_name, devname, IFNAMSIZ);
 
 	/*   if interface is br0:0 and
 	 *   there is no binding IP address then return down
@@ -154,17 +154,17 @@
 
 	if(ifName == NULL || ifName[0] == 0) return;
 	if(bridgeName == NULL || bridgeName[0] == 0) return;
-	//sprintf(sysCmd, "brctl delif %s %s 2>/dev/null", bridgeName, ifName);
+	//zos_snprintf(sysCmd, sizeof(sysCmd), "brctl delif %s %s 2>/dev/null", bridgeName, ifName);
 	//system(sysCmd);
-	sprintf(sysCmd, "ifconfig %s 0.0.0.0 2>/dev/null", ifName);
+	zos_snprintf(sysCmd, sizeof(sysCmd), "ifconfig %s 0.0.0.0 2>/dev/null", ifName);
 	if(system(sysCmd) == 0){
-		sprintf(sysCmd, "ifconfig %s up", ifName);
+		zos_snprintf(sysCmd, sizeof(sysCmd),"ifconfig %s up", ifName);
 		system(sysCmd);
-		sprintf(sysCmd, "brctl addif %s %s", bridgeName, ifName);
+		zos_snprintf(sysCmd, sizeof(sysCmd), "brctl addif %s %s", bridgeName, ifName);
 		system(sysCmd);
-		sprintf(sysCmd, "sendarp -s %s -d %s", bridgeName, bridgeName);
+		zos_snprintf(sysCmd, sizeof(sysCmd), "sendarp -s %s -d %s", bridgeName, bridgeName);
 		system(sysCmd);
-		sprintf(sysCmd, "sendarp -s %s -d %s", bridgeName, ifName);
+		zos_snprintf(sysCmd, sizeof(sysCmd), "sendarp -s %s -d %s", bridgeName, ifName);
 		system(sysCmd);
 	}
 }
@@ -173,11 +173,11 @@
 {
 	char sysCmd[64] = {0};
 
-	sprintf(sysCmd, "brctl delif %s %s", bridgeName, ifName);
+	zos_snprintf(sysCmd, sizeof(sysCmd), "brctl delif %s %s", bridgeName, ifName);
 	system(sysCmd);
-	sprintf(sysCmd, "sendarp -s %s -d %s", bridgeName, bridgeName);
+	zos_snprintf(sysCmd, sizeof(sysCmd), "sendarp -s %s -d %s", bridgeName, bridgeName);
 	system(sysCmd);
-	sprintf(sysCmd, "sendarp -s %s -d %s", bridgeName, ifName);
+	zos_snprintf(sysCmd, sizeof(sysCmd), "sendarp -s %s -d %s", bridgeName, ifName);
 	system(sysCmd);
 }
 
@@ -300,7 +300,7 @@
 			return true;
 		}
 		else{
-			strcpy(interfaceName, "br0");
+			ZOS_STRNCPY(interfaceName, "br0", 4);
 		}
 	}
 	pclose(fp);
@@ -323,7 +323,7 @@
 	if((fptr = fopen(pidFile, "r")) != NULL) {
 		fscanf(fptr, "%d", &pid);
 		printf("%s : Stop process with PID %d\n", __FUNCTION__, pid);
-		snprintf(sysCmd, sizeof(sysCmd), "kill -9 %d", pid);
+		zos_snprintf(sysCmd, sizeof(sysCmd), "kill -9 %d", pid);
 		zcfgLog(ZCFG_LOG_DEBUG, "Command %s\n", sysCmd);
 		if(system(sysCmd) != 0)
 			ret = ZCFG_INTERNAL_ERROR;
@@ -397,7 +397,7 @@
 	}
 
 	/* need to copy since strtok_r updates string */
-	strcpy(buf, macStr);
+	ZOS_STRNCPY(buf, macStr, (MAC_STR_LEN + 1));
 
 	/* Mac address has the following format
 	 * xx:xx:xx:xx:xx:xx where x is hex number
@@ -455,7 +455,7 @@
 		return ZCFG_INVALID_ARGUMENTS;
 	}
 
-	sprintf(macStr, "%2.2x:%2.2x:%2.2x:%2.2x:%2.2x:%2.2x",
+	zos_snprintf(macStr, MAC_ADDRESS_WITH_COLON, "%2.2x:%2.2x:%2.2x:%2.2x:%2.2x:%2.2x",
 			(uint8_t) macNum[0], (uint8_t) macNum[1], (uint8_t) macNum[2],
 			(uint8_t) macNum[3], (uint8_t) macNum[4], (uint8_t) macNum[5]);
 
@@ -476,7 +476,7 @@
 	int find_str_len = 0;
 	int gap = 0;
 
-	strcpy(result, source);
+	ZOS_STRNCPY(result, source, sizeof(result));
 	find_str_len = strlen(find_str);
 	rep_str_len = strlen(rep_str);
 	str_temp = source;
@@ -485,16 +485,16 @@
 	while(str_location != NULL){
 		gap += (str_location - str_temp);
 		result[gap] = '\0';
-		strcat(result, rep_str);
+		ZOS_STRCAT(result, rep_str, sizeof(result));
 		gap += rep_str_len;
 		str_temp = str_location + find_str_len;
-		strcat(result, str_temp);
+		ZOS_STRCAT(result, str_temp,sizeof(result));
 		str_location = strstr(str_temp, find_str);
 	}
 
 	result[strlen(result)] = '\0';
 	memset(source, 0 , strlen(source));
-	strcpy(source, result);
+	ZOS_STRNCPY(source, result, (strlen(result)+1));
 }
 
 
@@ -516,7 +516,7 @@
 		*(tmpStr+j) = *(str+i);
 		j++;
 	}
-	strcpy(str, tmpStr);
+	ZOS_STRNCPY(str, tmpStr, (strlen(tmpStr)+1));
 
 	return;
 }
@@ -534,7 +534,7 @@
 		*(tmpStr+j) = *(str+i);
 		j++;
 	}
-	strcpy(str, tmpStr);
+	ZOS_STRNCPY(str, tmpStr, (strlen(tmpStr)+1));
 
 	return;
 }
@@ -822,7 +822,7 @@
 		if (str_2[0] != '\0')
 		{
 			str_2++;
-			strcpy(new_Csv, str_2);
+			ZOS_STRNCPY(new_Csv, str_2, csvLen);
 		}
 	}
 	else
@@ -831,7 +831,7 @@
 		strncpy(new_Csv, csv, (str_1-csv)-1);
 		if (str_2[0] != '\0')
 		{
-			strcat(new_Csv, str_2);
+			ZOS_STRCAT(new_Csv, str_2, csvLen);
 		}
 	}
 
@@ -876,7 +876,7 @@
 	char brIP[16] = {'\0'};
 	char tmpPath[] = "/tmp/brIP";
 
-	sprintf(tmpStr, "ifconfig br0 > %s", tmpPath);
+	zos_snprintf(tmpStr, sizeof(tmpStr), "ifconfig br0 > %s", tmpPath);
 	ZOS_SYSTEM(tmpStr);
 	memset(tmpStr, 0, sizeof(tmpStr));
 
@@ -914,7 +914,7 @@
 				strncpy(uuidStr, tmpStr, 24);
 				for(int i=0; i<sizeof(MACAddr); i++)
 					MACAddr[i] = tolower(MACAddr[i]);
-				strcat(uuidStr, MACAddr);
+				ZOS_STRCAT(uuidStr, MACAddr, sizeof(uuidStr));
 				strncpy(uuid, uuidStr, 37); //uuid size 36 + EOL
 				ret = ZCFG_SUCCESS;
 			}
@@ -1069,15 +1069,15 @@
 	// mailsend command
 	char mailFrom[128] = {0}, security[128] = {0}, smtp[128] = {0}, mailTo[128] = {0}, user[128] = {0}, passwd[128] = {0}, subject[128] = {0};
 	int port = 0;
-	strcpy(mailFrom, (char *)json_object_get_string(json_object_object_get(sendObj, "mailfrom")));
+	ZOS_STRNCPY(mailFrom, (char *)json_object_get_string(json_object_object_get(sendObj, "mailfrom")), sizeof(mailFrom));
 	port = json_object_get_int(json_object_object_get(sendObj, "port"));
-	strcpy(security, (char *)json_object_get_string(json_object_object_get(sendObj, "security")));
-	strcpy(smtp, (char *)json_object_get_string(json_object_object_get(sendObj, "SMTP")));
-	strcpy(mailTo, (char *)json_object_get_string(json_object_object_get(sendObj, "mailto")));
-	strcpy(user, (char *)json_object_get_string(json_object_object_get(sendObj, "user")));
-	strcpy(passwd, (char *)json_object_get_string(json_object_object_get(sendObj, "pass")));
-	strcpy(subject, (char *)json_object_get_string(json_object_object_get(sendObj, "subject")));
-	sprintf(sysCmd, "mailsend -f %s -port %d -%s -smtp %s -domain %s -t %s -cs \"utf-8\" -auth -user %s -pass %s -sub \"%s\" ",
+	ZOS_STRNCPY(security, (char *)json_object_get_string(json_object_object_get(sendObj, "security")), sizeof(security));
+	ZOS_STRNCPY(smtp, (char *)json_object_get_string(json_object_object_get(sendObj, "SMTP")),sizeof(smtp));
+	ZOS_STRNCPY(mailTo, (char *)json_object_get_string(json_object_object_get(sendObj, "mailto")),sizeof(mailTo));
+	ZOS_STRNCPY(user, (char *)json_object_get_string(json_object_object_get(sendObj, "user")), sizeof(user));
+	ZOS_STRNCPY(passwd, (char *)json_object_get_string(json_object_object_get(sendObj, "pass")), sizeof(passwd));
+	ZOS_STRNCPY(subject, (char *)json_object_get_string(json_object_object_get(sendObj, "subject")), sizeof(subject));
+	zos_snprintf(sysCmd, sizeof(sysCmd), "mailsend -f %s -port %d -%s -smtp %s -domain %s -t %s -cs \"utf-8\" -auth -user %s -pass %s -sub \"%s\" ",
 			mailFrom,
 			port,
 			security,
@@ -1098,17 +1098,17 @@
 			/* mailsend can choose option between -attach file or -mime-type.
 			* It can attach multi files, but if it need mail body, use option -M only
 			* And now mailsend can only attach one text file */
-			sprintf(attachCmd, " -attach \"%s,text/plain\" -M \"%s\"", filepath, buff);
-			strcat(sysCmd, attachCmd);
+			zos_snprintf(attachCmd, sizeof(attachCmd), " -attach \"%s,text/plain\" -M \"%s\"", filepath, buff);
+			ZOS_STRCAT(sysCmd, attachCmd, sizeof(sysCmd));
 			fclose(fp);
 			fp = NULL;
 		}
 	} else {
 		char *normalCmd = " -mime-type \"text/plain\" -msg-body \"/tmp/mailbody\"";
-		strcat(sysCmd, normalCmd);
+		ZOS_STRCAT(sysCmd, normalCmd, sizeof(sysCmd));
 	}
 
-        strcat(sysCmd, " -log /tmp/mailLog");
+        ZOS_STRCAT(sysCmd, " -log /tmp/mailLog", sizeof(sysCmd));
 
 	printf("Sending Email...\n");
 	//printf("%s\n", sysCmd);
@@ -1252,7 +1252,7 @@
 
 	//iptables-restore
 	if(ipt->len_m || ipt->len_f || ipt->len_n){
-		strcpy(fileName, "/tmp/iptablesConfig-XXXXXX");
+		ZOS_STRNCPY(fileName, "/tmp/iptablesConfig-XXXXXX", sizeof(fileName));
 		fd = mkstemp(fileName);
 		fp = fdopen(fd, "w+");
 		if(fp != NULL)
@@ -1275,12 +1275,12 @@
 			fclose(fp);
 			fp = NULL;
 		}
-		sprintf(cmd, "%s --noflush %s", IPTABLESRESTORE, fileName);
+		zos_snprintf(cmd, sizeof(cmd), "%s --noflush %s", IPTABLESRESTORE, fileName);
 		ret = system(cmd);
 		if(ret != 0){
 			zcfgLog(ZCFG_LOG_ERR, "%s fail, ret = %d, called from %s, %s():%d\n", IPTABLESRESTORE, ret, file, func, line);
 			printf("%s fail, ret = %d, called from %s, %s():%d\n", IPTABLESRESTORE, ret, file, func, line);
-			sprintf(cmd, "cat %s", fileName);
+			zos_snprintf(cmd, sizeof(cmd), "cat %s", fileName);
 			system(cmd);
 		}
 
@@ -1289,7 +1289,7 @@
 
 	//ip6tables-restore
 	if(ipt->len_m6 || ipt->len_f6){
-		strcpy(fileName, "/tmp/iptablesConfig-XXXXXX");
+		ZOS_STRNCPY(fileName, "/tmp/iptablesConfig-XXXXXX", sizeof(fileName));
 		fd = mkstemp(fileName);
 		fp = fdopen(fd, "w+");
 		if(fp != NULL)
@@ -1307,12 +1307,12 @@
 			fclose(fp);
 			fp = NULL;
 		}
-		sprintf(cmd, "%s --noflush %s", IP6TABLESRESTORE, fileName);
+		zos_snprintf(cmd, sizeof(cmd), "%s --noflush %s", IP6TABLESRESTORE, fileName);
 		ret = system(cmd);
 		if(ret != 0){
 			zcfgLog(ZCFG_LOG_ERR, "%s fail, ret = %d, called from %s, %s():%d\n",IP6TABLESRESTORE, ret, file, func, line);
 			printf("%s fail, ret = %d, called from %s, %s():%d\n", IP6TABLESRESTORE, ret, file, func, line);
-			sprintf(cmd, "cat %s", fileName);
+			zos_snprintf(cmd, sizeof(cmd), "cat %s", fileName);
 			system(cmd);
 		}
 
@@ -1347,7 +1347,7 @@
 
 	if (username == NULL || password == NULL) return -3;
 	fileSerialNumber += 91;
-	sprintf(accFile, "/var/tmp/tmp%d", fileSerialNumber);
+	zos_snprintf(accFile, sizeof(accFile), "/var/tmp/tmp%d", fileSerialNumber);
 	fd = open(accFile, O_RDWR|O_CREAT, 0600);
 	if (fd < 0)
 	{
@@ -1355,17 +1355,17 @@
 		return -3;
 	}
 
-	sprintf(syscmd, "%s\r\n%s\r\n", username, password);
+	zos_snprintf(syscmd, sizeof(syscmd), "%s\r\n%s\r\n", username, password);
 	write(fd, syscmd, strlen(syscmd));
 	close(fd);
 
-	sprintf(syscmd, "login -z %s", accFile);
-	ZOS_SYSTEM(syscmd);
+	zos_snprintf(syscmd, sizeof(syscmd), "login -z %s", accFile);
+	ZOS_SYSTEM_S(syscmd);
 
 	fd = open(accFile, O_RDONLY);
 	if (fd < 0)
 	{
-		sprintf(syscmd, "rm %s", accFile);
+		zos_snprintf(syscmd, sizeof(syscmd), "rm %s", accFile);
 		ZOS_SYSTEM(syscmd);
 		printf("%s.%d: cant not open file! \n", __func__, __LINE__);
 		return -3;
@@ -1376,7 +1376,7 @@
 
 	sscanf(&accInfo[0], "result:%d", &ret);
 
-	sprintf(syscmd, "rm %s", accFile);
+	zos_snprintf(syscmd, sizeof(syscmd), "rm %s", accFile);
 	ZOS_SYSTEM(syscmd);
 
 	return ret;
@@ -1430,7 +1430,7 @@
         return;
     }
 
-    sprintf(tmpFilePath, "%s.tmp", filePath);
+    zos_snprintf(tmpFilePath, (strlen(filePath) + 4 + 1), "%s.tmp", filePath);
     tmpFp = fopen(tmpFilePath, "w");
     if (tmpFp == NULL)
     {
@@ -1452,9 +1452,9 @@
     fclose(tmpFp);
     fclose(fp);
 
-    sprintf(strBuff, "mv %s %s", tmpFilePath, filePath);
+    zos_snprintf(strBuff, sizeof(strBuff), "mv %s %s", tmpFilePath, filePath);
     system(strBuff);
-    sprintf(strBuff, "chmod 644 %s", filePath);
+    zos_snprintf(strBuff, sizeof(strBuff), "chmod 644 %s", filePath);
     system(strBuff);
 
     ZOS_FREE(tmpFilePath);
@@ -1534,7 +1534,7 @@
 		if (addr)
 			addr[0] = 0;
 	}
-	sprintf(cmd, "/tmp/isWANRoute.sh %s", ip);
+	zos_snprintf(cmd, sizeof(cmd), "/tmp/isWANRoute.sh %s", ip);
 	if (addr)
 		addr[0] = ':';
 
@@ -1549,10 +1549,10 @@
 	}
 	else
 	{
-		sprintf(cmd, "mkdir %s", REMOTE_MANAGEMENT_FILE_FOLDER);
+		zos_snprintf(cmd, sizeof(cmd), "mkdir %s", REMOTE_MANAGEMENT_FILE_FOLDER);
 		system(cmd);
 	}
-	sprintf(cmd, "touch %s%d", REMOTE_MANAGEMENT_FILE_FOLDER, pid);
+	zos_snprintf(cmd, sizeof(cmd), "touch %s%d", REMOTE_MANAGEMENT_FILE_FOLDER, pid);
 	system(cmd);
 
 	system("echo 0 > /proc/tc3162/led_pwr_green");
@@ -1597,7 +1597,7 @@
 		return;
 	}
 
-	sprintf(cmd, "rm %s%d &>/dev/null", REMOTE_MANAGEMENT_FILE_FOLDER, pid);
+	zos_snprintf(cmd, sizeof(cmd), "rm %s%d &>/dev/null", REMOTE_MANAGEMENT_FILE_FOLDER, pid);
 	system(cmd);
 
 	if (zyCountFilesInRemoteManageFolder() == 0)
@@ -1737,7 +1737,7 @@
 	int find_str_len = 0;
 	int gap = 0;
 
-	strcpy(result, source);
+	ZOS_STRNCPY(result, source, sizeof(result));
 	find_str_len = strlen(find_str);
 	rep_str_len = strlen(rep_str);
 	str_temp = source;
@@ -1746,15 +1746,15 @@
 	while(str_location != NULL){
 		gap += (str_location - str_temp);
 		result[gap] = '\0';
-		strcat(result, rep_str);
+		ZOS_STRCAT(result, rep_str, sizeof(result));
 		gap += rep_str_len;
 		str_temp = str_location + find_str_len;
-		strcat(result, str_temp);
+		ZOS_STRCAT(result, str_temp, sizeof(result));
 		str_location = strstr(str_temp, find_str);
 	}
 
 	result[strlen(result)] = '\0';
 	memset(source, 0 , strlen(source));
-	strcpy(source, result);
+	ZOS_STRNCPY(source, result, (strlen(result)+1));
 }
 
Index: libzyutil-1.0/flash.c
===================================================================
--- libzyutil-1.0.orig/flash.c	2021-04-20 10:00:15.293071530 +0800
+++ libzyutil-1.0/flash.c	2021-04-20 10:05:07.736362171 +0800
@@ -3,6 +3,7 @@
 #include "zcfg_common.h"
 #include "zyutil.h"
 #include "zlog_api.h"
+#include "zos_api.h"
 
 #include <sys/types.h>
 #include <sys/stat.h>
@@ -96,7 +97,7 @@
         printf("Can't open file\n");
     }
 	else {
-		sprintf(tmpname, "\"%s\"", mtdname);
+		zos_snprintf(tmpname, sizeof(tmpname), "\"%s\"", mtdname);
 
 		fscanf(fptr, "%s%s%s%s", mtd, size, erasesize, name);
 		while(!feof(fptr)) {
@@ -109,7 +110,7 @@
 				// Delete ':'
 				len = strlen(mtd);
 				mtd[len-1] = '\0';
-				sprintf(mtddev, "/dev/%s", mtd);
+				zos_snprintf(mtddev, (5 + sizeof(mtd)), "/dev/%s", mtd);
 				ret = ZCFG_SUCCESS;
 				printf("Find MTD Device %s with name %s.\n", mtddev, mtdname);
 				break;
@@ -841,8 +842,8 @@
 		return 1;
 	}
 	else{
-		/*sprintf(cmd_buf, "rm -rf %s", RUN_WWANPACKAGE_FILE);
-		system(cmd_buf);*/
+		/*zos_snprintf(cmd_buf, sizeof(cmd_buf), "rm -rf %s", RUN_WWANPACKAGE_FILE);
+ 		ZOS_SYSTEM(cmd_buf);*/
 		unlink(RUN_WWANPACKAGE_FILE);
 		if (strcmp(flashPkgRevision, fwPkgRevision) > 0){
 #if 1
@@ -864,13 +865,13 @@
 			bufPoint = NULL;
 			//free(flashwwan);
 #else
-			sprintf(cmd_buf, "cp %s %s", TMP_WWANPACKAGE_FILE, RUN_WWANPACKAGE_FILE);
+			zos_snprintf(cmd_buf, sizeof(cmd_buf), "cp %s %s", TMP_WWANPACKAGE_FILE, RUN_WWANPACKAGE_FILE);
 			system(cmd_buf);
 #endif
 		}
 		else{
 			//printf("%s: USE FW WWAN Package\n", __func__); //debug
-			sprintf(cmd_buf, "cp %s %s", FW_WWANPACKAGE_FILE, RUN_WWANPACKAGE_FILE);
+			zos_snprintf(cmd_buf, sizeof(cmd_buf), "cp %s %s", FW_WWANPACKAGE_FILE, RUN_WWANPACKAGE_FILE);
 			//system(cmd_buf);
 			fp = popen(cmd_buf, "r");
 			if(fp == NULL){
Index: libzyutil-1.0/libzyutil_wrapper.h
===================================================================
--- libzyutil-1.0.orig/libzyutil_wrapper.h	2021-04-20 10:00:15.201071531 +0800
+++ libzyutil-1.0/libzyutil_wrapper.h	2021-04-20 10:00:15.337071530 +0800
@@ -114,4 +114,9 @@
 int   ras_size();
 int   magic_number_check(char *uploadfilename);
 
+/*Length of MAC address is 12, add '\0', 12+1=13 Yen-Chun, Lin, 03.24.2021*/
+#define MAC_ADDRESS_LEN 13
+/*Length of MAC address is 12 , add 5 colon, add '\0', 12+5+1=18 Yen-Chun, Lin, 03.24.2021*/
+#define MAC_ADDRESS_WITH_COLON 18
+
 #endif // _LIBZYUTIL_WRAPPER_H_
Index: libzyutil-1.0/skconn.c
===================================================================
--- libzyutil-1.0.orig/skconn.c	2021-04-20 10:00:14.545071536 +0800
+++ libzyutil-1.0/skconn.c	2021-04-20 10:07:09.118530299 +0800
@@ -11,6 +11,7 @@
 #include "zcfg_common.h"
 #include "zcfg_debug.h"
 #include "zyutil.h"
+#include "zos_api.h"
 #ifdef ZYXEL_IPV6_UPLOAD_DIAG_ENABLE
 #include "errno.h"
 #endif
@@ -65,7 +66,7 @@
    if(!timeStampSz) return;
 
    localtm = localtime((const time_t *)&tv->tv_sec);
-   sprintf(tmsp, "%d-%02d-%02dT%02d:%02d:%02d.%ld", (localtm->tm_year+1900), (localtm->tm_mon+1), 
+   zos_snprintf(tmsp, sizeof(tmsp), "%d-%02d-%02dT%02d:%02d:%02d.%ld", (localtm->tm_year+1900), (localtm->tm_mon+1), 
        localtm->tm_mday, localtm->tm_hour, localtm->tm_min, localtm->tm_sec, (long)tv->tv_usec); 
    outputTmSpLen = ((timeStampSz-1) < strlen(tmsp)) ? (timeStampSz-1) : strlen(tmsp);
    strncpy(timeStamp, tmsp, outputTmSpLen);
@@ -103,7 +104,7 @@
          close(st);
          return -1;
       }
-      strcpy(svrAddr.sun_path, addr);
+      ZOS_STRNCPY(svrAddr.sun_path, addr, sizeof(svrAddr.sun_path));
       unlink(addr);
       len = sizeof(svrAddr.sun_family) + strlen(svrAddr.sun_path);
       rt = bind(st, (struct sockaddr*)&svrAddr, len);
@@ -168,7 +169,7 @@
          close(st);
          return -1;
       }
-      strcpy(svrAddr.sun_path, addr);
+      ZOS_STRNCPY(svrAddr.sun_path, addr, sizeof(svrAddr.sun_path));
       len = sizeof(svrAddr.sun_family) + strlen(svrAddr.sun_path);
 
       rt = connect(st, (struct sockaddr*)&svrAddr, len);
@@ -248,7 +249,7 @@
          close(st);
          return -1;
       }
-      strcpy(svrAddr.sun_path, addr);
+      ZOS_STRNCPY(svrAddr.sun_path, addr, sizeof(svrAddr.sun_path));
       unlink(addr);
       len = sizeof(svrAddr.sun_family) + strlen(svrAddr.sun_path);
       rt = bind(st, (struct sockaddr*)&svrAddr, len);
@@ -307,7 +308,7 @@
          close(st);
          return -1;
       }
-      strcpy(svrAddr.sun_path, addr);
+      ZOS_STRNCPY(svrAddr.sun_path, addr, sizeof(svrAddr.sun_path));
       len = sizeof(svrAddr.sun_family) + strlen(svrAddr.sun_path);
 
       rt = connect(st, (struct sockaddr*)&svrAddr, len);
Index: libzyutil-1.0/zyutil_sfp.c
===================================================================
--- libzyutil-1.0.orig/zyutil_sfp.c	2021-04-20 10:00:15.269071531 +0800
+++ libzyutil-1.0/zyutil_sfp.c	2021-04-20 10:07:36.571859217 +0800
@@ -21,6 +21,7 @@
 #endif
 #include "zyutil.h"
 #include "zyutil_sfp.h"
+#include "zos_api.h"
 
 #define DEFAULT_I2C_BUS				"/dev/i2c-0"
 #define PROC_SFP_PRESENT			"/proc/sfp/present"
@@ -320,8 +321,8 @@
 	unsigned char temp[2] = {0};
 	
 	for(i=0;i<length;i++){
-		sprintf(temp, "%02X" ,_string2[i]);
-		strcat(ss, temp);
+		zos_snprintf(temp, sizeof(temp), "%02X" ,_string2[i]);
+		ZOS_STRCAT(ss, temp, sizeof(ss));
 	}
 	memcpy(sn_buf , ss, DDMI_STRING_MAX_LENGTH);
 
@@ -538,7 +539,7 @@
 {
     struct ifreq i = {0};
     IOCTL_MIB_INFO out = {0};
-    strcpy(i.ifr_name, ifname);
+    ZOS_STRNCPY(i.ifr_name, ifname, IFNAMSIZ);
     i.ifr_data = &out;
     int32_t sock = socket(AF_INET, SOCK_DGRAM, 0);
     int32_t ret = ioctl(sock, SIOCMIBINFO, &i);
